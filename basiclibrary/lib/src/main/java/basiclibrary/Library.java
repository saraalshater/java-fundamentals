package basiclibrary;

import org.jetbrains.annotations.NotNull;

import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {

    public static void main(String[] args) {
        System.out.println("Hi");
        Library demo = new Library();
        System.out.println(Arrays.toString(demo.roll(6)));

        int [] arr = new int[]{1,2,3,4};
        double [] arr2 = new double[]{1,2,3,4.4};
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };;
        System.out.println(demo.containsDuplicates(arr));
        System.out.println(demo.calculateAverage(arr2));
        System.out.println(Arrays.toString(demo.lowestAverage(weeklyMonthTemperatures)));

        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        tally(votes);
        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }
    public boolean someLibraryMethod() {
        return true;
    }


    public static int [] roll(int num){
        Random diceValue = new Random();
        int [] arr = new int[num];
        for(int i = 0 ; i < num ; i++){
            int randomValue = diceValue.nextInt(6-1+1)+1;
            arr[i] = randomValue;
        }
        return arr;

    }

    public static boolean containsDuplicates(int [] arr){
        int value ;
        for(int i = 0 ; i < arr.length ; i++){
            value = arr[i];
            for(int j = i +1 ; i < arr.length ; i++){
                if(arr[j] == value){
                    return true;
                }
            }
        }
        return  false;
    }

    public static double calculateAverage(double [] arr){
        double sum =0;
        int count=0;
        double avg;
        for (double v : arr) {
            sum += v;
            count++;
        }
        avg = sum/count;
        return avg;
    }

    public static int[] lowestAverage(int[][] arr) {
        double average = 0 , lowestAverage = Integer.MAX_VALUE;
        int[] lowestAverageArr = arr[0];
        for (int[] ints : arr) {
            average = 0;
            for (int anInt : ints) {
                average += anInt;
            }
            average /= ints.length;
            if (average < lowestAverage) {
                lowestAverage = average;
                lowestAverageArr = ints;
            }

        }
        return lowestAverageArr;
    }
    public static String tally(@NotNull List<String> votes) {

        HashSet<String> set = new HashSet<String>();
        for (int i = 0; i < votes.size(); i++) {
            set.add(votes.get(i));
        }

        Object voters[];
        int counters[] = new int[set.size()];
        for (int i = 0; i < counters.length; i++) {
            counters[i] = 0;
        }

        voters = set.toArray();


        for (int i = 0; i < votes.size(); i++) {
            for (int j = 0; j < voters.length; j++) {
                if (votes.get(i) == voters[j]) {
                    counters[j]++;
                }
            }
        }

        int index = 0;
        int highestVote = 0;

        for (int i = 0; i < counters.length; i++) {
            if (highestVote < counters[i]) {
                index = i;
                highestVote = counters[i];
            }

        }

        String winner = voters[index].toString();
        return winner;
    }
}
